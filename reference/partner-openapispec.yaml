openapi: "3.0.0"
info:
  version: 0.0.67
  title: FeeWise Partner API
  description: API for partners
security:
  - PartnerAuth: [ ]
    APIAuth: [ ]

tags:
  - name: Payments
    description: Creation and retrieval of payment requests ( Invoices and Trust Deposits ) and client payments.
  - name: Webhook
    description: Webhook management
  - name: Firm
    description: View details about a firm and it's accounts.
  - name: Bank Account
    description: View details about a firm linked bank accounts.
  - name: API Key
    description: API Key management
  - name: Payouts
    description: Payouts from the platform to the firms


paths:
  /api/v3/partner/invoices:
    post:
      summary: Create an Invoice
      description: |
        Create an invoice for a channel partner.  
        NB the fields `invoice_id`, `payment_uri` and `status` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the invoice has been created and will be available in the response.
        The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead.
      operationId: createInvoice
      tags:
        - Payments
      requestBody:
        description: Invoice details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
            example:
              firm_id: facade00-0000-4000-a000-000000000000
              external_id: e69f9433-885b-4321-bb48-9f5084850893
              amount: '123.45'
              settlement_account_type: Office
              external_reference: inv-123
              currency: AUD
              due_date: '1953-07-23T13:56:24.084Z'
              surcharge_choice_override: Customer
              description: Charge for case setup
              matter: {
                external_id: my-unique-external-id,
                external_reference: my-external-reference,
                description: 'The matter of Frank vs Herman ',
                type: court
              }
              debtor: {
                external_id: case-client-1234,
                name: Frank,
                email: frank@email.com,
                contact_number: '1300234567'
              }

              line_items: [
                {
                  amount: '100',
                  name: Phone call,
                  description: Listened to voice message,
                  quantity: 1,
                  tax_rate: '10',
                }, {
                  amount: '1000',
                  name: Phone call,
                  description: Replied to voice mail,
                  quantity: 1,
                  tax_rate: '15'
                }
              ]
              notes: [
                'Got to know client',
                'Created initial case file'
              ]
              payment_methods_override: [
                'Card'
              ]
      responses:
        '200':
          description: Created Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
              example:
                invoice:
                  invoice_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: '123.45'
                  settlement_account_type: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman ',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: '10',
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: '15'
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
                  status: Submitted

  /api/v3/partner/invoices/{invoice_id}:
    parameters:
      - in: path
        name: invoice_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a specified invoice by id.
      description: Get a specified invoice by id.
      tags:
        - Payments
      operationId: getInvoiceById
      responses:
        '200':
          description: Found the requested invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '400':
          description: Bad request
        '404':
          description: Requested invoice not found
        '500':
          description: Error processing

  /api/v3/partner/invoices/{invoice_id}/adjust-amount:
    parameters:
      - in: path
        name: invoice_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      deprecated: true
      summary: Adjust an invoice.
      description: |
        Adjust the invoice amount after the invoice has been created. 
        If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint.
        If the invoice has no payments, the total amount will be updated to the adjustment amount.
        
        If a payment has already been made to the existing invoice, the adjustment request will fail.

      operationId: adjustInvoiceAmount
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                Adjust the invoice amount
              properties:
                new_amount:
                  type: string
                  format: decimal
                  x-go-type: decimal.Decimal
                  x-go-type-import:
                    path: github.com/shopspring/decimal
                  description: The new total amount for the invoice.
              example:
                new_amount: '7890.12'
              required:
                -   new_amount

      responses:
        '200':
          description: The adjustment was recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
              example:
                invoice:
                  invoice_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: '7890.12'
                  settlement_account_type: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman ',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: '10',
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: '15'
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/bf311c82-a0d1-4e31-998b-f00de9250d4a
                  status: Submitted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Requested invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Requested invoice is not in the correct state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/invoices/firm/{firm_id}/{external_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: external_id
        required: true
        schema:
          type: string
    get:
      summary: Get invoice by external_id
      description: |
        Get an invoice for a firm by the external_id. 
        NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact 
        with a unique id (external_id) that is meaningful for their system).
      tags:
        - Payments
      operationId: getInvoiceByExternalId
      responses:
        '200':
          description: Found the requested invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '400':
          description: Bad request
        '404':
          description: Requested invoice not found
        '500':
          description: Error processing


  /api/v3/partner/trust-deposits:
    post:
      summary: Create a Trust Deposit
      description: |
        Create a trust deposit for a channel partner.  
        NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the trust deposit has been created and will be available in the response.
        The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead.
      operationId: createTrustDeposit
      tags:
        - Payments
      requestBody:
        description: Trust deposit details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustDeposit'
            example:
              firm_id: facade00-0000-4000-a000-000000000000
              external_id: e69f9433-885b-4321-bb48-9f5084850893
              amount: '123.45'
              external_reference: inv-123
              currency: AUD
              due_date: '1953-07-23T13:56:24.084Z'
              surcharge_choice_override: Customer
              description: Charge for case setup
              matter: {
                external_id: my-unique-external-id,
                external_reference: my-external-reference,
                description: 'The matter of Frank vs Herman',
                type: court
              }
              debtor: {
                external_id: case-client-1234,
                name: Frank,
                email: frank@email.com,
                contact_number: '1300234567'
              }

              line_items: [
                {
                  amount: '100',
                  name: Phone call,
                  description: Listened to voice message,
                  quantity: 1,
                  tax_rate: "10",
                }, {
                  amount: '1000',
                  name: Phone call,
                  description: Replied to voice mail,
                  quantity: 1,
                  tax_rate: '15'
                }
              ]
              notes: [
                'Got to know client',
                'Created initial case file'
              ]
              payment_methods_override: [
                'Card'
              ]
      responses:
        '200':
          description: Created Trust Deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
              example:
                trust_deposit:
                  trust_deposit_id: 96ccd810-d21a-4d56-8ad9-956328e2b802
                  firm_id: facade00-0000-4000-a000-000000000000
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: '123.45'
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: "10",
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: '15'
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/96ccd810-d21a-4d56-8ad9-956328e2b802
                  status: Submitted

  /api/v3/partner/trust-deposits/{trust_deposit_id}:
    parameters:
      - in: path
        name: trust_deposit_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a Trust Deposit by id.
      description: Get a Trust Deposit by the specified trust_deposit_id.
      tags:
        - Payments
      operationId: getTrustDepositById
      responses:
        '200':
          description: Found the requested Trust Deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
        '400':
          description: Bad request
        '404':
          description: Requested Trust Deposit not found
        '500':
          description: Error processing

  /api/v3/partner/trust-deposits/firm/{firm_id}/{external_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: external_id
        required: true
        schema:
          type: string
    get:
      summary: Get Trust Deposit by external_id
      description: |
        Get a trust deposit for a firm by the external_id.
        NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact
        with a unique id (external_id) that is meaningful for their system).
      tags:
        - Payments
      operationId: getTrustDepositByExternalId
      responses:
        '200':
          description: Found the requested trust deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
        '400':
          description: Bad request
        '404':
          description: Requested trust deposit not found
        '500':
          description: Error processing

  /api/v3/partner/trust-deposits/{trust_deposit_id}/adjust-amount:
    parameters:
      - in: path
        name: trust_deposit_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      deprecated: true
      summary: Adjust an trust deposit.
      description: |
        Adjust the trust deposit amount after the trust deposit has been created. 
        If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint.
        If the trust deposit has no payments, the total amount will be updated to the adjustment amount.
        
        If a payment has already been made to the existing trust deposit, the adjustment request will fail.

      operationId: adjustTrustDepositAmount
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                Adjust the trust deposit amount
              properties:
                new_amount:
                  type: string
                  format: decimal
                  x-go-type: decimal.Decimal
                  x-go-type-import:
                    path: github.com/shopspring/decimal
                  description: The new total amount for the trust deposit.
              example:
                new_amount: '7890.12'
              required:
                - new_amount

      responses:
        '200':
          description: The adjustment was recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
              example:
                trust_deposit:
                  trust_deposit_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: "7890.12"
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman ',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: '10',
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: '15'
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/bf311c82-a0d1-4e31-998b-f00de9250d4a
                  status: Submitted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Requested trust deposit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Requested trust deposit is not in the correct state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/webhooks:
    get:
      summary: Get list of webhooks for the partner
      description: Get list of webhooks for the partner
      operationId: getWebhooks
      tags:
        - Webhook
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
              example:
                webhooks: [
                  {
                    name: mywebhook,
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    description: Testing my webhook,
                    url: 'https://to.me',
                    status: Enabled,
                    events: [
                      'artifact.invoice.created',
                      'payment.card.successful',
                      'payout.paid'
                    ],
                    authentication: {
                      type: 'bearer_token, basic_auth',
                      data: {
                        username: me,
                        password: password
                      },
                      add_position: 'header, body'
                    }
                  }
                ]

        '500':
          description: Error processing
          content:
            application/jsopn:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a webhook
      description: Create a webhook
      operationId: createWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
            examples:
              bearer_token:
                value:
                  {
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    name: mywebhook,
                    description: Testing my webhook,
                    url: https://to.me,
                    status: Enabled,
                    authentication: {
                      type: bearer_token,
                      data: {
                        token: abcdef12345,
                      },
                      add_position: header
                    },
                    events: [
                      'artifact.invoice.created',
                      'payment.card.successful',
                      'payout.paid'
                    ]
                  }

              basic_auth:
                value:
                  {
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    name: mywebhook,
                    description: Testing my webhook,
                    url: https://to.me,
                    status: Enabled,
                    authentication: {
                      type: basic_auth,
                      data: {
                        username: myusername,
                        password: password123
                      },
                      add_position: header
                    },
                    events: [
                      'artifact.invoice.created',
                      'payment.card.successful',
                      'payout.paid'
                    ]
                  }
      responses:
        '200':
          description: Created Webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse' # NB - the details with the webhook_id
              example:
                webhook: {
                  name: mywebhook,
                  party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                  description: Testing my webhook,
                  events: [
                    'artifact.invoice.created',
                    'payment.card.successful',
                    'payout.paid'
                  ],
                  status: Enabled,
                  url: https://to.me,
                  webhook_id: 65b3faf7-1156-4849-bc05-89e10d0bbacd,
                  authentication: {
                    add_position: 'header, body',
                    data: {
                      password: password,
                      username: me
                    },
                    type: 'bearer_token, basic_auth'
                  },
                }
        '409':
          description: A webhook already exists for the partyId with the same url and events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Error processing
          content:
            application/jsopn:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a webhook
      description: Update a webhook
      operationId: updateWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        '200':
          description: Webhook updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse' # NB - the details with the webhook_id
        '404':
          description: The specified webhook (by webhook_id) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: The update causes a conflict with an existing webhook (same partyId, url and events).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/webhooks/{webhook_id}:
    parameters:
      - in: path
        name: webhook_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    delete:
      description: Delete a webhook by id
      operationId: deleteWebhook
      tags:
        - Webhook
      responses:
        '204':
          description: Deleted Webhook
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/events/topics:
    get:
      summary: Get a list of event topics for the channel partner
      description: |
        All currently available event topics for the channel partner are returned.         
        The channel partner is derived from the PartnerAuth security context
      operationId: getChannelPartnerEventTopics
      tags:
        - Webhook
      responses:
        '200':
          description: List of currently available event topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTopics'
              example:
                event_topics: [
                  'artifact.invoice.created',
                  'artifact.trust-deposit.created'
                ]
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/events:
    get:
      summary: Get a list of events for the channel partner
      description: |
        Returns events for the channel partner matching the filter criteria.        
        The filters supplied in the query params must *all* be met.        
        The channel partner is derived from the PartnerAuth security context.
      operationId: getChannelPartnerWebhookEvents
      tags:
        - Webhook
      parameters:
        - in: query
          name: topic
          schema:
            type: string
          example: payout.paid
          required: false
        - in: query
          name: since_webhook_event_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the 
            other filter params (topic, status).  
            NB - 'since_webhook_event_id' and 'since' are mutually exclusive. Supplying both results in a BadRequest error.
          required: false
        - in: query
          name: since
          description: |
            Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.  
            NB - 'since_webhook_event_id' and 'since' are mutually exclusive. Supplying both results in a BadRequest error.
          schema:
            type: string
            format: date-time
          required: false
          example: "2022-07-29T15:33:00"
        - in: query
          name: status
          description: Webhook send status
          schema:
            $ref: '#/components/schemas/WebhookSendStatus'
          required: false
      responses:
        '200':
          description: List of matching events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              example:
                events: [
                  {
                    "webhook_event_id": "96d5e476-35d1-4209-a672-d179e0b5111c",
                    "externalId": "bd7fc497-8ad3-4a1f-9a07-7d364e7ab011",
                    "topic": "payout.paid",
                    "status": "sent",
                    "sent_at": "2022-07-28T05:39:32.029314Z",
                    "payload": {
                      "topic": "payout.paid",
                      "object": {
                        "payments": [
                          { "currency": "AUD", "artifact_id": "e9c42bc6-b7b3-4e24-a416-eda2a8c5cae2", "card_scheme": "MASTERCARD", "submit_time": "2022-07-26T04:54:20Z", "payment_type": "card", "total_amount": "3363.51", "artifact_type": "ArtifactInvoice", "payment_reference": "qp.14f4c4207", "card_number_partial": "1555", "customer_surcharge_amount": "61.09", "merchant_surcharge_amount": "0" }
                        ],
                        "branch_code": "063-074",
                        "account_type": "Office",
                        "account_number": "10069576",
                        "disbursed_amount": "3302.42",
                        "disbursement_date": "2022-07-26T22:28:45.918809Z",
                        "disbursement_reference": "qp.14f4c4207",
                        "batch_disbursement_reference": "rp.af27f7727"
                      },
                      "event_id": "612d6c74-78e8-4c69-915b-cc05d92e5372",
                      "party_id": "ca838b5d-8064-4910-aa54-bce2e6e81fbc",
                      "created_at": "2022-07-27T04:02:26.662446Z",
                      "channel_partner_id": "5ca1ab1e-cafe-4000-a000-deadbeefdead"
                    },
                  },
                ]
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/payouts:
    parameters:
      - in: query
        name: since
        required: false
        description: |
          Return payouts since this timestamp. 
          If not supplied, payouts for the last 24 hours are returned.
        schema:
          type: string
          format: date-time
        example: '2022-07-29T15:33:00Z'

    get:
      description: |
        Get list of payouts for the channel partner since the provided timestamp. 
        If not supplied, payouts for the last 24 hours are returned.
        The channel partner is derived from the PartnerAuth security context

      operationId: getChannelPartnerPayouts
      tags:
        - Payouts
      responses:
        '200':
          description: List of matching Payouts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payouts'
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/payouts/firms/{firm_id}:
    parameters:
      - in: path
        name: firm_id
        description: |
          ID of the firm whose payouts are to be retrieved
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: query
        name: since
        required: false
        description: |
          Return payouts, for the given channel partner / firm, sent since this timestamp. 
          If not supplied, payouts for the last 24 hours are returned.
        schema:
          type: string
          format: date-time
        example: '2022-07-29T15:33:00Z'

    get:
      description: |
        Get list of payouts for the specified firm. 
        If the since parameter is not supplied, payouts for the last 24 hours are returned.
      operationId: getFirmPayouts
      tags:
        - Payouts
      responses:
        '200':
          description: List of matching Payouts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payouts'
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/payments:
    get:
      summary: Search for payments for the channel partner
      description: |
        Search for payments for a channel partner..        
        The filters supplied in the query params must *all* be met.        
        The channel partner is derived from the PartnerAuth security context.
      operationId: getChannelPartnerPayments
      tags:
        - Payments
      parameters:
        - name: payment_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get a specific payment. If this is specified, other query params should not be specified 
            and will result in a BadRequest if the are.
        - name: artifact_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get payments only for the specified artifact (Invoice/Trust Desposit)
        - name: firm_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get payments going to a specific firm
        - name: since
          in: query
          description: |
            Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.
          schema:
            type: string
            format: date-time
          required: false
          example: '2022-07-29T15:33:00'
      responses:
        '200':
          description: List of matching payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/firms:
    post:
      summary: Create a new firm
      description: >
        The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm's status will be set to "pending" in FeeWise.
        The onboarding process follows a two-step procedure. Initially, the operational team will review the firm's details and perform necessary verifications. Once the firm's information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise.
        During the onboarding approval process, a webhook will be triggered for the "firm.onboarded" event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm.
        It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved.
        Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the "firm.onboarded" event and update their internal systems accordingly.

      operationId: createFirm
      tags:
        - Firm
      requestBody:
        description: Firm Details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFirm'
            example:
              company:
                external_id: firm_123
                legal_name: My Firm LLC
                legal_identifier: '0654047864'
                legal_structure: PrivateCorporation
                trading_name: My Firm
                tax_id: '12-3456789'
                website: https://rapidpaylegal.com.au/
                support_email: support@getfeewise.com
                support_number: (323) 467-7124
                contact_email: support@getfeewise.com
                contact_number: (323) 467-7124
                billing_email: support@getfeewise.com
                billing_number: (323) 467-7124
              address:
                address1: 5969 Melrose Ave,
                city: Los Angeles
                state_code: CA
                postal_code: '90038'
                country_code: US
              office_account:
                account_type: Office
                country_code: AU
                account_name: John Smith
                account_holder_type: Company
                branch_code: '110000000'
                account_number: '000123456789'
                address: 123 Main St
                alias: Office Account
                bank: Rapid Bank of Australia
              trust_account:
                account_type: Trust
                country_code: AU
                account_name: John Smith
                account_holder_type: Company
                branch_code: '110000000'
                account_number: '000111111116'
                address: 123 Main St
                alias: Trust Account
                bank: Rapid Bank of Australia

      responses:
        '201':
          description: Firm successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmDetails'
              example:
                company:
                  firm_id: 6901804a-66eb-4ec9-b01d-931bd2cc6940
                  external_id: firm_123"
                  legal_name: My Firm LLC
                  legal_identifier: '0654047864'
                  legal_structure: PrivateCorporation
                  trading_name: My Firm
                  tax_id: '12-3456789'
                  website: https://rapidpaylegal.com.au/
                  support_email: support@getfeewise.com
                  support_number: (323) 467-7124
                  contact_email: support@getfeewise.com
                  contact_number: (323) 467-7124
                  billing_email: support@getfeewise.com
                  billing_number: (323) 467-7124
                address:
                  address1: 5969 Melrose Ave,
                  city: Los Angeles
                  state_code: CA
                  postal_code: '90038'
                  country_code: US
                accounts:
                  - account_id: b6fb6bd2-1ae1-4784-896f-1d00a9457c44
                    account_type: Office
                    country_code: AU
                    account_name: John Smith
                    account_holder_type: Company
                    branch_code: '110000000'
                    account_number: '000123456789'
                    address: 123 Main St
                    alias: Office Account
                    bank: Rapid Bank of Australia
                    is_default: true
                  - account_id: 4c2cc488-1d71-4a2b-b226-4c6e5ce85470
                    account_type: Trust
                    country_code: AU
                    account_name: John Smith
                    account_holder_type: Company
                    branch_code: '110000000'
                    account_number: '000111111116'
                    address: 123 Main St
                    alias: Trust Account
                    bank: Rapid Bank of Australia
                    is_default: true
                roles: []
        '400':
          description: Bad JSON request or request contains an invalid uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Channel Partner Not Found
        '409':
          description: External ID is not unique or a Bank Account is invalid
        '500':
          description: Internal Server Error


  /api/v3/partner/firms/{firm_id}/magic-link:
    post:
      tags:
        - Firm
      parameters:
        - in: path
          name: firm_id
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
        - in: query
          name: destination_url
          required: false
          schema:
            type: string
      summary: Create a magic link
      description: |
        Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage
      operationId: getMagicLink
      responses:
        '200':
          description: Magic sign in link for a firm
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  expires:
                    type: string
                    format: date-time
        '500':
          description: Server Error
        '401':
          description: Access to Firm Unauthorized
        '404':
          description: Firm not found

  /api/v3/partner/firms/{firm_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a firm
      description: Get a firm by the firm's ID.  The firm will have the current sync status.
      operationId: getFirm
      tags:
        - Firm
      responses:
        '200':
          description: Return the Firm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmResponse'
              example:
                firm:
                  firm_id: 128ff5da-b1fe-45f1-a2bd-29176cf0828c
                  trading_name: My Lawyers
                  status: Synced
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/firms/sync/{connect_id}:
    parameters:
      - in: path
        name: connect_id
        required: true
        schema:
          type: string
    post:
      summary: Sync a firm by the FeeWise Connect ID
      description: Given a FeeWise Connect ID return a the firm's ID and status.  The firm ID can be used for future requests.
      operationId: syncFirm
      tags:
        - Firm
      responses:
        '200':
          description: Return the Firm ID and status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmResponse'
              example:
                firm:
                  firm_id: 128ff5da-b1fe-45f1-a2bd-29176cf0828c
                  trading_name: My Lawyers
                  status: Synced
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/accounts:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    get:
      summary: List all firms bank account's.
      description: Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
      operationId: getFirmBankAccounts
      tags:
        - Firm
        - Bank Account
      responses:
        '200':
          description: Return the list of bank accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsResponse'
              example:
                office_accounts:
                  - account_id: 9ba5022f-9a5c-4dcb-bfe4-655764837543
                    account_name: Main Business
                    account_type: Office
                    account_number: '1234567'
                    branch_code: '999999'
                    is_default: true
                  - account_id: ac71b83e-d629-4d8e-a624-0bab270a0f42
                    account_name: Operations
                    account_type: Office
                    account_number: '5556677'
                    branch_code: '999999'
                    is_default: false
                trust_accounts:
                  - account_id: d98dfe65-def3-481c-bb5c-b460f6f924e3
                    account_name: Trust Account
                    account_type: Trust
                    account_number: '222233344'
                    branch_code: '999999'
                    is_default: true
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/accounts/{account_id}/default:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: account_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      summary: Set firms default bank account.
      description: Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account
        becomes the default office or trust account.
      operationId: setFirmsDefaultBankAccount
      tags:
        - Firm
        - Bank Account
      responses:
        '200':
          description: The default bank account was successfully set.  The bank account object is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
              example:
                bank_account:
                  account_id: 9ba5022f-9a5c-4dcb-bfe4-655764837543
                  account_name: Main Business
                  account_type: Office
                  account_number: '1234567'
                  branch_code: '999999'
                  is_default: true
        '404':
          description: Bank Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/rotatekey:
    post:
      description: |
        Produces a new API-KEY. This new key and the previous key will both be valid until they expire.
        The key expiry is set by system defaults but may be customised for this specific key in the request.
      operationId: rotateApiKey
      tags:
        - API Key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyRotation'
      responses:
        '200':
          description: New api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/webhook/receiver:
    post:
      summary: Dummy receiver for webhooks.
      description: This is a webhook receiver. Normally implemented by channel partners to receive webhooks
      operationId: receiveWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook event.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookEvent'
      responses:
        '200':
          description: The webhook was received

  /api/v3/partner/payments/external:
    post:
      summary: Record external payment.
      description: |
        If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint.
        This will be recorded as a payment against the artifact and change the amount_due.
      operationId: recordExternalPayment
      tags:
        - Payments
      requestBody:
        description: External payment details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalPayment'
            example:
              artifact_id: '4c662be8-0557-406c-ae14-d98118b81f27'
              amount: '100'
              payment_type: 'Card'
              external_id: '123'
              details: 'external payment'
      responses:
        '200':
          description: The payment was recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalPaymentResponse'
        '404':
          description: Artifact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: External payment already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/matters:
    post:
      description: |
        Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit.
      operationId: createMatter
      tags:
        - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatterRequest'
            example:
              firm_id: facade00-0000-4000-a000-000000000000
              matter:
                external_id: my-unique-external-id
                external_reference: my-external-reference
                description: 'The matter of Frank vs Herman '
                type: court
              debtor:
                external_id: case-client-1234
                name: Frank
                email: frank@email.com
                contact_number: "1300234567"
              artifacts:
                - external_id: e69f9433-885b-4321-bb48-9f5084850893
                  artifact_type: Invoice
                  amount: "100.00"
                  settlement_account_type: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: "1953-07-23T13:56:24.084Z"
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  line_items:
                    - amount: "50"
                      name: Phone call
                      description: Listened to voice message
                      quantity: 1
                      tax_rate: "10"
                    - amount: "50"
                      name: Phone call
                      description: Replied to voice mail
                      quantity: 1
                      tax_rate: "15"
                  notes:
                    - Got to know client
                    - Created initial case file
                  payment_methods_override:
                    - Card
                - external_id: 46b3eed1-b469-46f3-ab93-2bb6921b8592
                  artifact_type: Invoice
                  amount: "150.00"
                  settlement_account_type: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: "1953-07-23T13:56:24.084Z"
                  surcharge_choice_override: Customer
                  description: Legal service
                  line_items:
                    - amount: "100"
                      name: Phone call
                      description: Listened to voice message
                      quantity: 1
                      tax_rate: "10"
                  notes:
                    - Got to know client
                    - Created initial case file
                  payment_methods_override:
                    - Card
      responses:
        '200':
          description: Matter was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatterResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/statements/matters/{matter_id}:
    get:
      deprecated: true
      parameters:
        - in: path
          name: matter_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          required: true
        - in: query
          name: to
          required: false
          schema:
            type: integer
        - in: query
          name: from
          required: false
          schema:
            type: integer
      description: |
        Get a matter statement that is payable by the client via the returned URL. 

        Note: `to` and `from` are not yet implemented.
      operationId: getMatterStatement
      tags:
        - Payments
      responses:
        '200':
          description: Matter Statement was returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatterStatement'
        '400':
          description: Incompatible filters provided. Must provide at least a matter_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/statements/debtors/{debtor_id}/matters/{matter_id}:
    get:
      parameters:
        - in: path
          name: debtor_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          required: true
        - in: path
          name: matter_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          required: true
        - in: query
          name: to
          required: false
          schema:
            type: integer
        - in: query
          name: from
          required: false
          schema:
            type: integer
      description: |
        Get a matter statement that is payable by the client via the returned URL. 

        Note: `to` and `from` are not yet implemented.
      operationId: getDebtorMatterStatement
      tags:
        - Payments
      responses:
        '200':
          description: Matter Statement was returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatterStatement'
        '400':
          description: Incompatible filters provided. Must provide at least a matter_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/charges:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    post:
      summary: Create a Charge
      description: |
        Create a charge for a firm. The firm can then send the returned URI to their customer, for payment.
        NB the fields `charge_id`, and `payment_uri` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the charge has been created and will be available in the response.
      operationId: createCharge
      tags:
        - Payments
      requestBody:
        description: Charge details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Charge'
            example:
              amount: '123.45'
              settlement_account_type: Office
              description: Charge for case setup
              debtor: {
                external_id: case-client-1234,
                first_name: Frank,
                last_name: Smith,
                email: frank@email.com,
                contact_number: '1300234567'
              }
              notes: [
                'Got to know client',
                'Created initial case file'
              ]
              payment_methods_override: [
                'Card',
                'DirectDebit'
              ]
              store_payment_methods: [
                'Card'
              ]
              metadata: {
                "key1": value,
                "key2": value2
              }
      responses:
        '200':
          description: Created Charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
              example:
                charge:
                  charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  amount: '123.45'
                  settlement_account_type: Office
                  description: Charge for case setup
                  debtor: {
                    external_id: case-client-1234,
                    first_name: Frank,
                    last_name: Smith,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card',
                    'DirectDebit'
                  ]
                  store_payment_methods: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
        '400':
          description: Bad request, do not include charge_id or payment_uri in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Firm or Settlement Account could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/charges/payment_token/{payment_token}:
    parameters:
      - in: path
        name: payment_token
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    post:
      summary: Create a Charge, and pay directly, using a customer payment token.
      description: |
        Create a charge (and pay for it) for a firm, using an existing customer payment token. 
        A list of customer payment tokens can be retrieved from the `/customers` endpoint.
        
        NB the fields `charge_id`, and `payment_uri` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the charge has been created and will be available in the response.
      operationId: createChargeAndPayWithCustomerPaymentToken
      tags:
        - Payments
      requestBody:
        description: Charge details, using an existing customer payment token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Charge'
            example:
              amount: '543.21'
              settlement_account_type: Office
              description: Charge for case setup
              debtor: {
                external_id: case-client-charge-4321,
                first_name: John,
                last_name: Smith,
                email: john@email.com,
                contact_number: '1300234567'
              }
              notes: [
                'Got to know client',
                'Created initial case file'
              ]
      responses:
        '200':
          description: Charge created and paid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAndPayResponse'
              example:
                charge:
                  charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  amount: '123.45'
                  settlement_account_type: Office
                  description: Charge for case setup
                  debtor: {
                    external_id: case-client-1234,
                    first_name: Frank,
                    last_name: Smith,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card',
                    'DirectDebit'
                  ]
                  store_payment_methods: [
                    'Card'
                  ]
                payment_id: 74a30957-4f49-42f5-b037-9145fc2fbb19
        '400':
          description: Bad request, do not include charge_id or payment_uri in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Firm or Settlement Account could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/customers:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: List all the customers for a firm.
      description: Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
      operationId: getFirmCustomers
      tags:
        - Firm
      responses:
        '200':
          description: Return the list of customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersResponse'
              example:
                customers:
                  - debtor:
                      debtor_id: e9f17c2b-8dac-49f4-b022-739e62e0ab47
                      external_id: case-client-1234
                      first_name: Frank
                      last_name: Smith
                      email: frank@email.com
                      contact_number: '1300234567'
                    payment_methods:
                      - payment_method_id: f8fb61a7-5589-4bf7-b7df-3b53e67d7195
                        scheme: visa
                        scheme_partial_number: '1234'
                        funding_type: credit
                        country: US
                        expiration_date: '2025-07-27T04:02:26.662446Z'
                      - payment_method_id: 07c068ed-acb0-4335-9eef-dea2fbcb9ff3
                        scheme: amex
                        scheme_partial_number: '2345'
                        funding_type: credit
                        country: US
                        expiration_date: '2025-08-25T04:02:26.662446Z'
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/payment_token:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    post:
      summary: Create a payment token for a customer.
      description: Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v3/partner/charges/pay/payment_token/{payment_token}.
      operationId: createPaymentToken
      tags:
        - Firm
      requestBody:
        description: Customer details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Debtor'
            example:
                external_id: eb83fb91-1a42-478f-adde-b0b790c99b5e
                first_name: John
                last_name: Smith
                email: john@email.com
                contact_number: '1300234567'
      responses:
        '200':
          description: Return the customer and payment token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTokenResponse'
              example:
                debtor:
                  debtor_id: e9f17c2b-8dac-49f4-b022-739e62e0ab47
                  external_id: eb83fb91-1a42-478f-adde-b0b790c99b5e
                  first_name: John
                  last_name: Smith
                  email: john@email.com
                  contact_number: '1300234567'
                payment_token: f8fb61a7-5589-4bf7-b7df-3b53e67d7195
                capture_uri: http://localhost:8080/capture/f8fb61a7-5589-4bf7-b7df-3b53e67d7195
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    PartnerAuth:
      type: apiKey
      in: header
      name: X-CHANNEL-PARTNER-ID
    APIAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:

    Invoice:
      type: object
      description: |
        An Invoice is created to request payment.
        One of settlement_account_type or settlement_account_id must be specified but not both.
      properties:
        invoice_id:
          type: string
          description: |
            This is the uuid of the invoice. This will be used for and 'GET' of the invoice and in webhooks about this invoice
            NB this is generated and must not be supplied when creating an invoice.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering invoices. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering invoices.
          example: inv-123
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount the invoice is for.
        amount_due:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount outstanding on this invoice.
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        settlement_account_type:
          $ref: "#/components/schemas/AccountType"
        settlement_account_id:
          description: |
            The id of the account the invoice settlement should be paid to. 
            NB, if both the settlement_account_type and settlement_account_id are specified, it is a bad request
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        notes:
          description: Freeform notes on the invoice
          type: array
          items:
            type: string
        payments:
          description: List of payments made against this invoice
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        description:
          type: string
          description: Freeform text for API user.
        payment_uri:
          type: string
          description: The URI to get the client payment instructions for this invoice
        status:
          type: string
          description: The status of the invoice
          enum:
            - Draft
            - Submitted
            - Authorised
            - Voided
      required:
        - firm_id
        - external_id
        - amount

    InvoiceResponse:
      type: object
      properties:
        invoice:
          $ref: '#/components/schemas/Invoice'
      required:
        - invoice

    TrustDeposit:
      type: object
      description: |
        A TrustDeposit is created to request payment into a Trust account
      properties:
        trust_deposit_id:
          type: string
          description: |
            This is the uuid of the Trust Deposit. This will be used for any 'GET' of the Trust Deposit and in webhooks about this Trust Deposit
            NB this is generated and must not be supplied when creating a Trust Deposit.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the trust deposit is raised for.
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering trust deposits. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering trust deposits.
          example: inv-123
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount the trust deposit is for.
        amount_due:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount outstanding on this trust deposit.
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        notes:
          type: array
          items:
            type: string
          description: Freeform notes on the trust deposit
        payments:
          description: List of payments made against this trust deposit.
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        settlement_account_id:
          description: |
            The id of the account the trust deposit should be paid to. 
            If not supplied, the default trust deposit for the firm will be used
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        description:
          type: string
          description: Freeform text for channel partner / PMS.
        payment_uri:
          type: string
          description: |
            The URI to send to customer.   
            They will follow this link to make a payment.   
            NB This must not be set when creating an invoice.
        status:
          type: string
          description: The status of the trust deposit. This must not be set when creating an trust deposit.
          enum:
            - Draft
            - Submitted
            - Authorised
            - Voided
      required:
        - firm_id
        - external_id
        - amount

    TrustDepositResponse:
      type: object
      properties:
        trust_deposit:
          $ref: '#/components/schemas/TrustDeposit'
      required:
        - trust_deposit


    LineItem:
      type: object
      description: One item of potentially many that are included in a payment.
      properties:
        name:
          type: string
        description:
          type: string
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        quantity:
          type: integer
        tax_rate:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
      required:
        - amount


    Matter:
      type: object
      description: The matter that payments are regarding.
      properties:
        matter_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        external_id:
          type: string
          description: The id of the matter in the PMS.
        external_reference:
          type: string
          description: Freeform reference (normally for the PMS)
        description:
          type: string
          description: A description of the matter
        type:
          type: string
          description: Free form type of the matter.
      required:
        - "external_id"

    MatterRequest:
      type: object
      description: The matter request object contains all matter information, debtor details and artifacts, invoices or trust deposits, to be created for the matter.
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        matter:
          $ref: '#/components/schemas/Matter'
        debtor:
          $ref: "#/components/schemas/Debtor"
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
      required:
        - firm_id
        - matter
        - artifacts

    MatterResponse:
      type: object
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        matter:
          $ref: '#/components/schemas/Matter'
        debtor:
          $ref: "#/components/schemas/Debtor"
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
      required:
        - firm_id
        - matter
        - artifacts

    Artifact:
      type: object
      description: |
        An Artifact can be an Invoice or a Trust Deposit. An Artifact is created to request payment.
        One of settlement_account_type or settlement_account_id must be specified but not both.
      properties:
        artifact_id:
          type: string
          description: |
            This is the uuid of the artifact. This will be used for and 'GET' of the artifact and in webhooks about this artifact
            NB this is generated and must not be supplied when creating an artifact.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        artifact_type:
          $ref: '#/components/schemas/ArtifactType'
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering artifacts. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering artifacts.
          example: inv-123
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount the artifact is for.
        amount_due:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount outstanding on this artifact.
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        settlement_account_type:
          $ref: "#/components/schemas/AccountType"
        settlement_account_id:
          description: |
            The id of the account the artifact settlement should be paid to. 
            NB, if both the settlement_account_type and settlement_account_id are specified, it is a bad request
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        notes:
          description: Freeform notes on the artifact
          type: array
          items:
            type: string
        payments:
          description: List of payments made against this artifact
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        description:
          type: string
          description: Freeform text for API user.
        status:
          type: string
          description: The status of the artifact
          enum:
            - Draft
            - Submitted
            - Authorised
            - Voided
      required:
        - external_id
        - amount
        - artifact_type

    ExternalPaymentResponse:
      type: object
      properties:
        artifact_details:
          $ref: '#/components/schemas/Artifact'
      required:
        - artifact_details

    Debtor:
      type: object
      description: The entity that should be making the payment. This will normally be a client of the firm.
      properties:
        debtor_id:
          description:  This is the uuid of the debtor in FeeWise.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        external_id:
          type: string
          description: ID in the PMS
        name:
          type: string
          deprecated: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        contact_number:
          type: string
      required:
        - external_id

    Currency:
      type: string
      description: Currency of a payment. If not specified, the local default is used.
      enum:
        - AUD
        - CAD
        - USD

    AccountType:
      type: string
      enum:
        - Office
        - Trust

    ArtifactType:
      type: string
      enum:
        - Invoice
        - TrustDeposit
        - Matter
        - OfficeReplenishment
        - TrustReplenishment
        - Charge

    PaymentMethod:
      type: string
      enum:
        - Card
        - DirectDebit

    SurchargeChoice:
      type: string
      enum:
        - Customer
        - Merchant

    WebhookList:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
      required:
        - webhooks

    Webhook:
      type: object
      properties:
        webhook_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        party_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        name:
          type: string
        description:
          type: string
        url:
          type: string
        status:
          $ref: "#/components/schemas/WebhookStatus"
        events:
          type: array
          example: [ "artifact.invoice.created", "payment.card.successful", "payout.paid" ]
          items:
            type: string
        authentication:
          $ref: "#/components/schemas/WebhookApiAuthentication"
      required:
        - party_id
        - name
        - description
        - url
        - status
        - events
        - authentication


    WebhookResponse:
      type: object
      properties:
        webhook:
          $ref: "#/components/schemas/Webhook"
      required:
        - webhook

    WebhookApiAuthentication:
      type: object
      properties:
        type:
          type: string
          example: bearer_token, basic_auth
        add_position:
          type: string
          example: header, body
        data:
          description: Either "username" and "password" or "token" keys
          example: ' "username": "me@blah.com",  "password": "password:123" '
          additionalProperties:
            type: string
      required:
        - type
        - data

    WebhookStatus:
      type: string
      enum:
        - Unknown
        - Enabled
        - Disabled

    WebhookSendStatus:
      type: string
      description: Webhook send status
      enum:
        - sent
        - failed

    EventTopics:
      type: object
      properties:
        event_topics:
          type: array
          items:
            type: string
      required:
        - event_topics

    ErrorResponse:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        type:
          type: string


    Event:
      type: object
      properties:
        webhook_event_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        externalId:
          type: string
          description: The id of the firm the webhook was related to.
        topic:
          type: string
          description: The topic of the event.
        status:
          $ref: "#/components/schemas/WebhookSendStatus"
        payload:
          type: object
          additionalProperties: true
          description: The webhooks payload and metadata about how and when the data was sent.
        sent_at:
          type: string
          format: date-time
          description: The timestamp the webhook send was attempted.
      required:
        - webhook_event_id
        - topic
        - sent_at
        - status
        - payload
        - externalId

    Events:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        filters:
          $ref: "#/components/schemas/EventFilters"
      required:
        - events

    EventFilters:
      type: object
      properties:
        status:
          type: string
          example: sent, failed, all
        topic:
          type: string
          example: none, {userSupplied}
        since:
          type: string
          format: date-time
      required:
        - status
        - topic
        - since

    FirmResponse:
      type: object
      properties:
        firm:
          $ref: '#/components/schemas/Firm'
      required:
        - firm

    Firm:
      type: object
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        trading_name:
          type: string
        status:
          type: string
          enum:
            - Synced
            - InProgress
            - Denied
      required:
        - firm_id
        - trading_name
        - status

    BankAccount:
      type: object
      properties:
        account_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        account_type:
          $ref: "#/components/schemas/AccountType"
        account_name:
          type: string
        account_holder_type:
          type: string
          enum:
            - Company
            - Individual
        account_number:
          type: string
        branch_code:
          type: string
        alias:
          type: string
        bank:
          type: string
        country_code:
          type: string
        is_default:
          type: boolean
      required:
        - account_type
        - account_number
        - branch_code

    BankAccountResponse:
      type: object
      properties:
        bank_account:
          $ref: '#/components/schemas/BankAccount'
      required:
        - bank_account

    BankAccountsResponse:
      type: object
      properties:
        office_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        trust_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
      required:
        - office_accounts
        - trust_accounts


    Payment:
      description: Describes a payment coming into the system (client of a firm paying an invoice, trust deposit, ...)
      type: object
      properties:
        transaction_id:
          type: string
          description: The unique id of this single transaction in the payout.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payment_id:
          type: string
          description: The id of the payment. nb A single payment may contain multiple transactions and may not be unique.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payment_type:
          $ref: '#/components/schemas/PaymentMethod'
        artifact_id:
          description: The artifact (Invoice, TrustDeposit, ...) the payment is in relation to.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        artifact_type:
          $ref: '#/components/schemas/ArtifactType'
        external_id:
          type: string
          description: This is the id of the artifact supplied by the channel partner / PMS.
        external_payment:
          description: |
            If the payment.payment_type is 'External', the external_payment property *may* be available.            
            The values for these properties are supplied in the call to 'RecordExternalPayment'
          type: object
          properties:
            type:
              type: string
              description: The type supplied when the external payment was recorded
            external_id:
              type: string
              description: The id supplied when the external payment was recorded
            details:
              type: string
              description: The details supplied when the external payment was recorded
        received:
          type: string
          description: The amount received from the client.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "1000.00"
        refunded:
          type: string
          description: The amount refunded (back to the client) against this payment.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "200.00"
        paid_out:
          type: string
          description: The total amount paid to the firm for this payment
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "800.00"
        currency:
          type: string
          description: The currency the payment was made in.
        date:
          description: When the payment was made.
          type: string
          format: date-time
      required:
        - payment_id
        - transaction_id
        - artifact_id
        - artifact_type
        - paid_out
        - currency
        - date

    Payments:
      type: object
      properties:
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
      required:
        - payments

    PayoutStatus:
      type: string
      description: |
        Current status of the payout.
        The status changes to paid, if the transaction goes through,
        or to failed or cancelled (within 5 business days)
      enum:
        - None
        - Submitted
        - Paid
        - Failed
        - Cancelled

    Payout:
      description: Describes a payout made by the system to a channel partner's firm
      type: object
      properties:
        payout_reference:
          type: string
          description: The unique reference of the payout. This will appear in the bank account statement the payout was made to.
          example: fw.a1f0cdd52
        date:
          description: When the payout was made.
          type: string
          format: date-time
        payout_total:
          type: string
          description: The total paid out to the firm. This is the sum of the transactions paid_out amounts.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "1000.00"
        account:
          type: object
          properties:
            account_type:
              $ref: '#/components/schemas/AccountType'
            branch_code:
              type: string
            account_number:
              type: string
            alias:
              type: string
              description: The name of the account for the PMS
            country_code:
              type: string
              description: The country the account is in
          description: Details of the account the payout is for.
        firm_id:
          type: string
          description: The id of the firm the payout was made to.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        status:
          $ref: '#/components/schemas/PayoutStatus'
        transactions:
          description: A list of the payments that are included in this payout
          type: array
          items:
            $ref: '#/components/schemas/Payment'
      required:
        - payout_reference
        - payout_total
        - firm_id
        - account
        - date
        - transactions
        - status

    Payouts:
      type: object
      properties:
        payouts:
          type: array
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - payouts


    WebhookEvent:
      type: object
      required:
        - event_type
        - event_id
        - event
      properties:
        event_type:
          type: string
        event_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        created_at:
          type: string
          format: date-time
        event:
          oneOf:
            - $ref: '#/components/schemas/Invoice'
            - $ref: '#/components/schemas/TrustDeposit'
            - $ref: '#/components/schemas/Payment'
            - $ref: '#/components/schemas/Payout'
            - $ref: '#/components/schemas/PaymentAuthorisedEvent'

    ApiKeyRotation:
      type: object
      properties:
        previous_key_expires_hours:
          default: 48
          description: hours until expiry (0 to expire immediately, defaults to 48 hours)
          example: 24
          type: integer
      required:
        - previous_key_expires_hours

    ApiKeyResponse:
      type: object
      properties:
        api_key:
          type: string

    ExternalPayment:
      description: A payment that was made outside of the FeeWise platform.
      type: object
      properties:
        artifact_id:
          description: The artifact (Invoice, TrustDeposit, ...) the payment is in relation to.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        amount:
          description: The amount of the external payment
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        payment_type:
          type: string
          description: Freeform description of the type (eg visa, amex, cash, bank transfer)
        external_id:
          type: string
          description: An ID, external to FeeWise, to identify the payment
        details:
          type: string
          description: Freeform description of the payment (eg "Paid in person with cash - receipt GB-6832" )
      required:
        - artifact_id
        - external_id
        - amount

    MatterStatement:
      type: object
      properties:
        matter:
          $ref: '#/components/schemas/Matter'
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        debtor:
          $ref: "#/components/schemas/Debtor"
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
        payment_url:
          type: string
          description: The URI to get the client payment instructions for this matter statement
      required:
        - firm_id
        - matter
        - payment_url
        - artifacts
        - debtor

    CardPayment:
      type: object
      properties:
        scheme:
          type: string
          description: Card scheme (e.g. Visa, Mastercard)
        scheme_partial_number:
          type: string
          description: Partial card number
        funding_type:
          type: string
          description: Funding type (e.g. credit, debit)
        country:
          type: string
          description: Country code (e.g. US, CA)
        expiration_date:
          type: string
          format: date-time


    DebitPayment:
      type: object
      properties:
        country:
          type: string
          description: Country code (e.g. US, CA)
        bank_name:
          type: string
          description: Name of the bank
        account_name:
          type: string
          description: Name of the account holder
        branch_code:
          type: string
          description: Bank branch code
        account_partial_number:
          type: string
          description: Partial account number


    ArtifactReceipt:
      type: object
      description: An artifact (invoice, matter, deposit, etc...), which also contains the payment receipt id
      properties:
        receipt_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The receipt ID
          example: "7cf0f73e-4bf4-4f51-8cb4-8db2fcb91b55"
        artifact_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The artifact ID
          example: "7cf0f73e-4bf4-4f51-8cb4-8db2fcb91b56"
        artifact_type:
          $ref: '#/components/schemas/ArtifactType'
        external_id:
          type: string
          description: The external ID
          example: "external123"
        name:
          type: string
          description: The artifact name
          example: "Artifact Name"
        description:
          type: string
          description: The artifact description
          example: "Artifact Description"
        amount_paid:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The amount paid for the artifact
          example: "100.00"
        account:
          type: object
          description: Details of the settlement account
          properties:
            account_type:
              $ref: '#/components/schemas/AccountType'
            branch_code:
              type: string
            account_number:
              type: string
            alias:
              type: string
              description: The name of the account for the Firm
            country_code:
              type: string
              description: The country the account is in
          required:
            - account_type
            - branch_code
            - account_number
            - country_code
      required:
        - receipt_id
        - artifact_id
        - artifact_type
        - external_id
        - name
        - amount_paid
        - account

    PaymentAuthorisedEvent:
      type: object
      properties:
        artifacts:
          type: array
          items:
            $ref: "#/components/schemas/ArtifactReceipt"
        payment_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The payment ID
          example: "7cf0f73e-4bf4-4f51-8cb4-8db2fcb91b54"
        amount_paid:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The amount paid
          example: "125.00"
        card_payment:
          $ref: "#/components/schemas/CardPayment"
        debit_payment:
          $ref: "#/components/schemas/DebitPayment"
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm ID
          example: "8b14c470-f6df-4522-9dc6-8fc2bb59fc6f"
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
        payment_method_detail:
          type: string
          description: The payment method detail
          example: "Visa ending in 1234"
      required:
        - amount_paid
        - payment_id
        - artifacts
        - firm_id
        - payment_method

    Charge:
      type: object
      description: |
        A Charge is created to request payment.
        Either the settlement_account_type or the settlement_account_id must be provided but not both.
      properties:
        charge_id:
            type: string
            description: |
              This is the uuid of the charge. This will be used for a 'GET' of the charge and in webhooks about this charge.
              NB: this is generated and must not be supplied when creating an charge.
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
        firm_id:
          type: string
          description: The firm the charge is being created for.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering charges. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering charges.
          example: charge-123
        amount:
          type: string
          description: The total amount the charge is for.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        amount_due:
          type: string
          description: The total amount outstanding on this charge.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        settlement_account_type:
          $ref: "#/components/schemas/AccountType"
        settlement_account_id:
          description: |
            The id of the account the charge should be paid to.
            NB: if both the settlement_account_type and settlement_account_id are specified, it is a bad request.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        notes:
          description: Any notes relevant to the charge.
          type: array
          items:
            type: string
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        description:
          type: string
          description: Description of the charge.
        store_payment_methods:
          type: array
          description: Choose which payment methods to save when the customer pays a charge.
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        payment_uri:
          type: string
          description: The URI to pay the charge.
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: >-
            Set of key value pairs that you can attach to an object. Useful for storing additional information about the object in a structured format.
          type: object

      required:
        - amount

    ChargeResponse:
      type: object
      properties:
        charge:
          $ref: '#/components/schemas/Charge'
      required:
        - charge

    ChargeAndPayResponse:
      type: object
      properties:
        charge:
          $ref: '#/components/schemas/Charge'
        payment_id:
          description: The unique ID for this charges payment
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    CustomerDetails:
      type: object
      properties:
        debtor:
          $ref: '#/components/schemas/Debtor'
        payment_methods:
          type: array
          items:
            $ref: '#/components/schemas/CustomerPaymentMethod'
      required:
      - debtor

    CustomerPaymentMethod:
      allOf:
        - type: object
          properties:
            payment_token:
              description: The unique ID for this customer's payment method, this can be used to charge the associated customer
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/gofrs/uuid
                name: uuid
        - $ref: '#/components/schemas/CardPayment'

    CustomersResponse:
      type: object
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerDetails'
      required:
      - customers

    PaymentTokenResponse:
      type: object
      properties:
        debtor:
          $ref: '#/components/schemas/Debtor'
        payment_token:
          description: The unique ID for this customer's payment method, this can be used to charge the associated customer
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        capture_uri:
          type: string
          description: The URI to capture the payment details for this payment token

    CreateFirm:
      type: object
      properties:
        company:
          $ref: '#/components/schemas/Company'
        address:
          $ref: '#/components/schemas/Address'
        office_account:
          $ref: '#/components/schemas/BankAccount'
        trust_account:
          $ref: '#/components/schemas/BankAccount'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          description: Roles can be either Representative, Executives or Owners.
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
            description: >-
              Set of key value pairs that you can attach to an object. Useful for storing additional information about the object in a structured format.

      required:
        - company
        - address
        - office_account

    FirmDetails:
      type: object
      properties:
        company:
          $ref: '#/components/schemas/Company'
        address:
          $ref: '#/components/schemas/Address'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Person'
      required:
        - company
        - address
        - accounts

    Company:
      type: object
      properties:
        firm_id:
          description: | 
              Create the company details for a firm.
              NB the field `firm_id`, must NOT be supplied during `create`. If supplied, BadResponse will be returned.
              The firm_id is used by FeeWise to refer to a firm. It is populated once the firm has been created and will be available in the response. (or any GET Firm requests)
              See external_id
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        external_id:
          description: Allows callers to use their own system id, for the firm. external_id will always be returned in any responses, where a FeeWise Firm is returned.
          type: string
        legal_name:
          type: string
        legal_identifier:
          type: string
        legal_structure:
          type: string
          enum:
            - MultiMemberLLC
            - PrivateCorporation
            - PrivatePartnership
            - PublicCorporation
            - PublicPartnership
            - SingleMemberLLC
            - SoleProprietorship
            - UnincorporatedAssociation
            - Individual
        tax_id:
          type: string
        trading_name:
          type: string
        website:
          type: string
          format: uri
        support_email:
          type: string
          oneOf:
          - enum: [""]
          - format: email
        support_number:
          type: string
        contact_email:
          type: string
          format: email
        contact_number:
          type: string
        billing_email:
          type: string
          format: email
        billing_number:
          type: string
        status:
          type: string
          description: Firm's status.
          enum:
            - Pending
            - Awaiting
            - Active
            - Closed
      required:
        - legal_name
        - legal_structure
        - tax_id
        - trading_name
        - contact_number
        - contact_email
        - billing_email
        - website


    Address:
      type: object
      properties:
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        state_code:
          type: string
        postal_code:
          type: string
        country_code:
          type: string
      required:
        - address1
        - city
        - state_code
        - postal_code
        - country_code

    Person:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        title:
          type: string
        phone:
          type: string
        national_id:
          type: string
        email:
          type: string
          format: email
        address:
          $ref: '#/components/schemas/Address'
        date_of_birth:
          type: string
          format: date
        is_executive:
          type: boolean
          description: Indicates if the individual bears substantial responsibility for controlling, managing, or directing the organization.
        is_representative:
          type: boolean
          description: Representative refers to the designated primary representative of the account, authorized by the business to provide both personal information about themselves and general details about the account. It is essential to note that there can only be one representative assigned to the account at any given time, and during the account creation, this role is typically assigned to the individual responsible for opening the account.
        ownership_percentage:
          type: number
          format: double
          description: The percent owned of firm's legal entity owned by the person.
        ssn_last_4:
          type: string
          description: The last four digits of the person's Social Security number, US only



