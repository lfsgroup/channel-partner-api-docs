openapi: "3.0.0"
info:
  version: 0.0.33
  title: FeeWise Partner API
  description: API for partners
security:
  - PartnerAuth: [ ]
    APIAuth: [ ]

tags:
  - name: Payments
    description:  Creation and retrieval of payment requests ( Invoices and Trust Deposits ) and client payments.
  - name: Webhook
    description: Webhook management
  - name: Firm
    description: View details about a firm and it's accounts.
  - name: Bank Account
    description: View details about a firm linked bank accounts.
  - name: API Key
    description: API Key management
  - name: Payouts
    description: Payouts from the platform to the firms


paths:
  /api/v3/partner/invoices:
    post:
      summary: Create an Invoice
      description: |
        Create an invoice for a channel partner.  
        NB the fields `invoice_id`, `payment_uri` and `status` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the invoice has been created and will be available in the response
      operationId: createInvoice
      tags:
        - Payments
      requestBody:
        description: Invoice details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
            example:
              firm_id: 7f623e2d-270d-8ad8-2e13-b7bfd022703e
              external_id: e69f9433-885b-4321-bb48-9f5084850893
              amount: "123.45"
              settlement_account: Office
              external_reference: inv-123
              currency: AUD
              due_date: '1953-07-23T13:56:24.084Z'
              surcharge_choice_override: Customer
              description: Charge for case setup
              matter: {
                         external_id: my-unique-external-id,
                         external_reference: my-external-reference,
                         description: 'The matter of Frank vs Herman ',
                         type: court
                      }
              debtor: {
                  external_id: case-client-1234,
                  name: Frank,
                  email: frank@email.com,
                  contact_number: '1300234567'
              }

              line_items: [
                {
                    amount: '100',
                    name: Phone call,
                    description: Listened to voice message,
                    quantity: 1,
                    tax_rate: "10",
                }, {
                    amount: '1000',
                    name: Phone call,
                    description: Replied to voice mail,
                    quantity: 1,
                    tax_rate: "15"
                }
              ]
              notes: [
                'Got to know client',
                'Created initial case file'
              ]
              payment_methods_override: [
                'Card'
              ]
      responses:
        '200':
          description: Created Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
              example:
                invoice:
                  invoice_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: 7f623e2d-270d-8ad8-2e13-b7bfd022703e
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: "123.45"
                  settlement_account: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman ',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: "10",
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: "15"
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
                  status: Submitted

  /api/v3/partner/invoices/{invoice_id}:
    parameters:
      - in: path
        name: invoice_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a specified invoice by id.
      description: Get a specified invoice by id.
      tags:
        - Payments
      operationId: getInvoiceById
      responses:
        '200':
          description: Found the requested invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '400':
          description: Bad request
        '404':
          description: Requested invoice not found
        '500':
          description: Error processing


  /api/v3/partner/invoices/firm/{firm_id}/{external_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: external_id
        required: true
        schema:
          type: string
    get:
      summary: Get invoice by external_id
      description: |
        Get an invoice for a firm by the external_id. 
        NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact 
        with a unique id (external_id) that is meaningful for their system).
      tags:
        - Payments
      operationId: getInvoiceByExternalId
      responses:
        '200':
          description: Found the requested invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '400':
          description: Bad request
        '404':
          description: Requested invoice not found
        '500':
          description: Error processing


  /api/v3/partner/trust-deposits:
    post:
      summary: Create a Trust Deposit
      description: |
        Create a trust deposit for a channel partner.  
        NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the trust deposit has been created and will be available in the response
      operationId: createTrustDeposit
      tags:
        - Payments
      requestBody:
        description: Trust deposit details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustDeposit'
            example:
              firm_id: 7f623e2d-270d-8ad8-2e13-b7bfd022703e
              external_id: e69f9433-885b-4321-bb48-9f5084850893
              amount: "123.45"
              external_reference: inv-123
              currency: AUD
              due_date: '1953-07-23T13:56:24.084Z'
              surcharge_choice_override: Customer
              description: Charge for case setup
              matter: {
                external_id: my-unique-external-id,
                external_reference: my-external-reference,
                description: 'The matter of Frank vs Herman',
                type: court
              }
              debtor: {
                external_id: case-client-1234,
                name: Frank,
                email: frank@email.com,
                contact_number: '1300234567'
              }

              line_items: [
                {
                  amount: '100',
                  name: Phone call,
                  description: Listened to voice message,
                  quantity: 1,
                  tax_rate: "10",
                }, {
                  amount: '1000',
                  name: Phone call,
                  description: Replied to voice mail,
                  quantity: 1,
                  tax_rate: "15"
                }
              ]
              notes: [
                'Got to know client',
                'Created initial case file'
              ]
              payment_methods_override: [
                'Card'
              ]
      responses:
        '200':
          description: Created Trust Deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
              example:
                trust_deposit:
                  trust_deposit_id: 96ccd810-d21a-4d56-8ad9-956328e2b802
                  firm_id: 7f623e2d-270d-8ad8-2e13-b7bfd022703e
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: "123.45"
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: "10",
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: "15"
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/96ccd810-d21a-4d56-8ad9-956328e2b802
                  status: Submitted

  /api/v3/partner/trust-deposits/{trust_deposit_id}:
    parameters:
      - in: path
        name: trust_deposit_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a Trust Deposit by id.
      description: Get a Trust Deposit by the specified trust_deposit_id.
      tags:
        - Payments
      operationId: getTrustDepositById
      responses:
        '200':
          description: Found the requested Trust Deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
        '400':
          description: Bad request
        '404':
          description: Requested Trust Deposit not found
        '500':
          description: Error processing

  /api/v3/partner/trust-deposits/firm/{firm_id}/{external_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: external_id
        required: true
        schema:
          type: string
    get:
      summary: Get Trust Deposit by external_id
      description: |
        Get a trust deposit for a firm by the external_id.
        NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact
        with a unique id (external_id) that is meaningful for their system).
      tags:
        - Payments
      operationId: getTrustDepositByExternalId
      responses:
        '200':
          description: Found the requested trust deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
        '400':
          description: Bad request
        '404':
          description: Requested trust deposit not found
        '500':
          description: Error processing


  /api/v3/partner/webhooks:
    get:
      summary: Get list of webhooks for the partner
      description: Get list of webhooks for the partner
      operationId: getWebhooks
      tags:
        - Webhook
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
              example:
                webhooks:  [
                  {
                    name: mywebhook,
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    description: Testing my webhook,
                    url: 'https://to.me',
                    status: Enabled,
                    events: [
                      'artifact.invoice.created',
                      'payment.card.successful',
                      'payout.disbursed'
                    ],
                    authentication: {
                      type: 'bearer_token, basic_auth',
                      data: {
                        username: me,
                        password: password
                      },
                      add_position: 'header, body'
                    }
                  }
                ]

        '500':
          description: Error processing
          content:
            application/jsopn:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a webhook
      description: Create a webhook
      operationId: createWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
            examples:
              bearer_token:
                value:
                  {
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    name: mywebhook,
                    description: Testing my webhook,
                    url: https://to.me,
                    status: Enabled,
                    authentication: {
                      type: bearer_token,
                      data: {
                        token: abcdef12345,
                      },
                      add_position: header
                    },
                    events: [
                      'artifact.invoice.created',
                      'payment.card.successful',
                      'payout.disbursed'
                    ]
                  }

              basic_auth:
                value:
                  {
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    name: mywebhook,
                    description: Testing my webhook,
                    url: https://to.me,
                    status: Enabled,
                    authentication: {
                      type: basic_auth,
                      data: {
                        username: myusername,
                        password: password123
                      },
                      add_position: header
                    },
                    events: [
                      'artifact.invoice.created',
                      'payment.card.successful',
                      'payout.disbursed'
                    ]
                  }
      responses:
        '200':
          description: Created Webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse' # NB - the details with the webhook_id
              example:
                webhook: {
                  name: mywebhook,
                  party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                  description: Testing my webhook,
                  events: [
                    'artifact.invoice.created',
                    'payment.card.successful',
                    'payout.disbursed'
                  ],
                  status: Enabled,
                  url: https://to.me,
                  webhook_id: 65b3faf7-1156-4849-bc05-89e10d0bbacd,
                  authentication: {
                    add_position: 'header, body',
                    data: {
                      password: password,
                      username: me
                    },
                    type: 'bearer_token, basic_auth'
                  },
                }
        '409':
          description: A webhook already exists for the partyId with the same url and events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Error processing
          content:
            application/jsopn:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a webhook
      description: Update a webhook
      operationId: updateWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        '200':
          description: Webhook updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse' # NB - the details with the webhook_id
        '404':
          description: The specified webhook (by webhook_id) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: The update causes a conflict with an existing webhook (same partyId, url and events).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/webhooks/{webhook_id}:
    parameters:
      - in: path
        name: webhook_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    delete:
      description: Delete a webhook by id
      operationId: deleteWebhook
      tags:
        - Webhook
      responses:
        '204':
          description: Deleted Webhook
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/events/topics:
    get:
      summary: Get a list of event topics for the channel partner
      description: |
        All currently available event topics for the channel partner are returned.         
        The channel partner is derived from the PartnerAuth security context
      operationId: getChannelPartnerEventTopics
      tags:
        - Webhook
      responses:
        '200':
          description: List of currently available event topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTopics'
              example:
                event_topics: [
                  'artifact.invoice.created',
                  'artifact.trust-deposit.created'
                ]
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/events:
    get:
      summary: Get a list of events for the channel partner
      description: |
        Returns events for the channel partner matching the filter criteria.        
        The filters supplied in the query params must *all* be met.        
        The channel partner is derived from the PartnerAuth security context.
      operationId: getChannelPartnerWebhookEvents
      tags:
        - Webhook
      parameters:
        - in: query
          name: topic
          schema:
            type: string
          example: payout.disbursed
          required: false
        - in: query
          name: since_webhook_event_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the 
            other filter params (topic, status).  
            NB - 'since_webhook_event_id' and 'since' are mutually exclusive. Supplying both results in a BadRequest error.
          required: false
        - in: query
          name: since
          description: |
            Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.  
            NB - 'since_webhook_event_id' and 'since' are mutually exclusive. Supplying both results in a BadRequest error.
          schema:
            type: string
            format: date-time
          required: false
          example: "2022-07-29T15:33:00"
        - in: query
          name: status
          description: Webhook send status
          schema:
            $ref: '#/components/schemas/WebhookSendStatus'
          required: false
      responses:
        '200':
          description: List of matching events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              example:
                events: [
                  {
                    "webhook_event_id": "96d5e476-35d1-4209-a672-d179e0b5111c",
                    "externalId": "bd7fc497-8ad3-4a1f-9a07-7d364e7ab011",
                    "topic": "payout.disbursed",
                    "status": "sent",
                    "sent_at": "2022-07-28T05:39:32.029314Z",
                    "payload": {
                        "topic": "payout.disbursed",
                        "object": {
                          "payments": [
                            { "currency": "AUD", "artifact_id": "e9c42bc6-b7b3-4e24-a416-eda2a8c5cae2", "card_scheme": "MASTERCARD", "submit_time": "2022-07-26T04:54:20Z", "payment_type": "card", "total_amount": "3363.51", "artifact_type": "ArtifactInvoice", "payment_reference": "qp.14f4c4207", "card_number_partial": "1555", "customer_surcharge_amount": "61.09", "merchant_surcharge_amount": "0" }
                          ],
                          "branch_code": "063-074",
                          "account_type": "Office",
                          "account_number": "10069576",
                          "disbursed_amount": "3302.42",
                          "disbursement_date": "2022-07-26T22:28:45.918809Z",
                          "disbursement_reference": "qp.14f4c4207",
                          "batch_disbursement_reference": "rp.af27f7727"
                        },
                        "event_id": "612d6c74-78e8-4c69-915b-cc05d92e5372",
                        "party_id": "ca838b5d-8064-4910-aa54-bce2e6e81fbc",
                        "created_at": "2022-07-27T04:02:26.662446Z",
                        "channel_partner_id": "5ca1ab1e-cafe-4000-a000-deadbeefdead"
                    },
                  },
                ]
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/payouts:
    get:
      summary: Search for payouts for the channel partner
      description: |
        Search for payouts for a channel partner..        
        The filters supplied in the query params must *all* be met.        
        The channel partner is derived from the PartnerAuth security context.
      operationId: getChannelPartnerPayouts
      tags:
        - Payouts
      parameters:
        - name: payout_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get a specific payout. If this is specified, other query params should not be specified 
            and will result in a BadRequest if the are.
        - name: account
          in: query
          required: false
          schema:
            type: object
            properties:
              account_number:
                type: string
              bank_code:
                type: string
            required:
              - account_number
              - branch_code
          description: |
            Get payouts going to a specific account.
        - name: firm_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get payouts going to a specific firm
        - name: since_payout_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            If supplied, all payouts since this payout was sent, are retrieved. The retrieved payouts are subject to the 
            other filter params (firm_id, settlement_account_id).  
            NB - 'since_payout_id' and 'since' are mutually exclusive. Supplying both results in a BadRequest error.
        - name: since
          in: query
          required: false
          description: |
            Return payouts sent since this timestamp. If not supplied, payouts for the last 24 hours are returned.  
            NB - 'since_payout_id' and 'since' are mutually exclusive. Supplying both results in a BadRequest error.
          schema:
            type: string
            format: date-time
          example: "2022-07-29T15:33:00"
      responses:
        '200':
          description: List of matching Payouts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payouts'
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



  /api/v3/partner/payments:
    get:
      summary: Search for payments for the channel partner
      description: |
        Search for payments for a channel partner..        
        The filters supplied in the query params must *all* be met.        
        The channel partner is derived from the PartnerAuth security context.
      operationId: getChannelPartnerPayments
      tags:
        - Payments
      parameters:
        - name: payment_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get a specific payment. If this is specified, other query params should not be specified 
            and will result in a BadRequest if the are.
        - name: artifact_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get payments only for the specified artifact (Invoice/Trust Desposit)
        - name: firm_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get payments going to a specific firm
        - name: since
          in: query
          description: |
            Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.
          schema:
            type: string
            format: date-time
          required: false
          example: "2022-07-29T15:33:00"
      responses:
        '200':
          description: List of matching payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/firms/{firm_id}/magic-link:
    post:
      parameters:
        - in: path
          name: firm_id
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
        - in: query
          name: destination_url
          required: false
          schema:
            type: string
      summary: Create a magic link
      description: | 
        Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage
      operationId: getMagicLink
      responses:
        '200':
          description: Magic sign in link for a firm
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  expires:
                    type: string
                    format: date-time
        '500':
          description: Server Error
        '401':
          description: Access to Firm Unauthorized
        '404':
          description: Firm not found

  /api/v3/partner/firms/{firm_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a firm
      description: Get a firm by the firm's ID.  The firm will have the current sync status.
      operationId: getFirm
      tags:
        - Firm
      responses:
        '200':
          description: Return the Firm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmResponse'
              example:
                firm:
                  firm_id: 128ff5da-b1fe-45f1-a2bd-29176cf0828c
                  trading_name: My Lawyers
                  status: Synced
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/firms/sync/{connect_id}:
    parameters:
      - in: path
        name: connect_id
        required: true
        schema:
          type: string
    post:
      summary: Sync a firm by the FeeWise Connect ID
      description: Given a FeeWise Connect ID return a the firm's ID and status.  The firm ID can be used for future requests.
      operationId: syncFirm
      tags:
        - Firm
      responses:
        '200':
          description: Return the Firm ID and status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmResponse'
              example:
                firm:
                  firm_id: 128ff5da-b1fe-45f1-a2bd-29176cf0828c
                  trading_name: My Lawyers
                  status: Synced
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/accounts:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    get:
      summary: List all firms bank account's.
      description: Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
      operationId: getFirmBankAccounts
      tags:
        - Firm
        - Bank Account
      responses:
        '200':
          description: Return the list of bank accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsResponse'
              example:
                office_accounts:
                  - account_id: 9ba5022f-9a5c-4dcb-bfe4-655764837543
                    account_name: Main Business
                    account_type: Office
                    account_number: '1234567'
                    branch_code: '999999'
                    is_default: true
                  - account_id: ac71b83e-d629-4d8e-a624-0bab270a0f42
                    account_name: Operations
                    account_type: Office
                    account_number: '5556677'
                    branch_code: '999999'
                    is_default: false
                trust_accounts:
                  - account_id: d98dfe65-def3-481c-bb5c-b460f6f924e3
                    account_name: Trust Account
                    account_type: Trust
                    account_number: '222233344'
                    branch_code: '999999'
                    is_default: true
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/accounts/{account_id}/default:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: account_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      summary: Set firms default bank account.
      description: Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account
                   becomes the default office or trust account.
      operationId: setFirmsDefaultBankAccount
      tags:
        - Firm
        - Bank Account
      responses:
        '200':
          description: The default bank account was successfully set.  The bank account object is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
              example:
                bank_account:
                  account_id: 9ba5022f-9a5c-4dcb-bfe4-655764837543
                  account_name: Main Business
                  account_type: Office
                  account_number: '1234567'
                  branch_code: '999999'
                  is_default: true
        '404':
          description: Bank Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/rotatekey:
    post:
      description: |
        Produces a new API-KEY. This new key and the previous key will both be valid until they expire.
        The key expiry is set by system defaults but may be customised for this specific key in the request.
      operationId: rotateApiKey
      tags:
        - API Key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyRotation'
      responses:
        '200':
          description: New api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/webhook/receiver:
    post:
      summary: Dummy receiver for webhooks.
      description: This is a webhook receiver. Normally implemented by channel partners to receive webhooks
      operationId: receiveWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook event.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookEvent'
      responses:
        '200':
          description: The webhook was received

  /api/v3/partner/payments/external:
    post:
      summary: Record external payment.
      description: |
        If a payment is made towards an artifact (invoice, trust deposit) outside of feewise, it should be recorded using this endpoint.
        This will be recorded as a payment against the artifact and change the amount_due.
      operationId: recordExternalPayment
      tags:
        - Payments
      requestBody:
        description: External payment details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalPayment'
      responses:
        '200':
          description: The payment was recorded
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    PartnerAuth:
      type: apiKey
      in: header
      name: X-CHANNEL-PARTNER-ID
    APIAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:

    Invoice:
      type: object
      description: |
        An Invoice is created to request payment
      properties:
        invoice_id:
          type: string
          description: |
            This is the uuid of the invoice. This will be used for and 'GET' of the invoice and in webhooks about this invoice
            NB this is generated and must not be supplied when creating an invoice.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering invoices. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering invoices.
          example: inv-123
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount the invoice is for.
        amount_due:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount outstanding on this invoice.
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        settlement_account:
          $ref: "#/components/schemas/AccountType"
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        notes:
          description: Freeform notes on the invoice
          type: array
          items:
            type: string
        payments:
          description: List of payments made against this invoice
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        description:
          type: string
          description: Freeform text for API user.
        payment_uri:
          type: string
          description: The URI to get the client payment instructions for this invoice
        status:
          type: string
          description: The status of the invoice
          enum:
            - Draft
            - Submitted
            - Authorised
            - Voided
      required:
        - firm_id
        - external_id
        - amount
        - settlement_account

    InvoiceResponse:
      type: object
      properties:
        invoice:
          $ref: '#/components/schemas/Invoice'
      required:
        - invoice

    TrustDeposit:
      type: object
      description: |
        A TrustDeposit is created to request payment into a Trust account
      properties:
        trust_deposit_id:
          type: string
          description: |
            This is the uuid of the Trust Deposit. This will be used for any 'GET' of the Trust Deposit and in webhooks about this Trust Deposit
            NB this is generated and must not be supplied when creating a Trust Deposit.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the trust deposit is raised for.
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering trust deposits. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering trust deposits.
          example: inv-123
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount the trust deposit is for.
        amount_due:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount outstanding on this trust deposit.
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        notes:
          type: array
          items:
            type: string
          description: Freeform notes on the trust deposit
        payments:
          description: List of payments made against this trust deposit.
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        description:
          type: string
          description: Freeform text for channel partner / PMS.
        payment_uri:
          type: string
          description: |
            The URI to send to customer.   
            They will follow this link to make a payment.   
            NB This must not be set when creating an invoice.
        status:
          type: string
          description: The status of the trust deposit. This must not be set when creating an trust deposit.
          enum:
            - Draft
            - Submitted
            - Authorised
            - Voided
      required:
        - firm_id
        - external_id
        - amount

    TrustDepositResponse:
      type: object
      properties:
        trust_deposit:
          $ref: '#/components/schemas/TrustDeposit'
      required:
        - trust_deposit


    LineItem:
      type: object
      description: One item of potentially many that are included in a payment.
      properties:
        name:
          type: string
        description:
          type: string
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        quantity:
          type: integer
        tax_rate:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
      required:
        - amount


    Matter:
      type: object
      description: The matter that payments are regarding.
      properties:
        external_id:
          type: string
          description: The id of the matter in the PMS.
        external_reference:
          type: string
          description: Freeform reference (normally for the PMS)
        description:
          type: string
          description: A description of the matter
        type:
          type: string
          description: Free form type of the matter.


    Debtor:
      type: object
      description: The entity that should be making the payment. This will normally be a client of the firm.
      properties:
        external_id:
          type: string
          description: ID in the PMS
        name:
          type: string
        email:
          type: string
        contact_number:
          type: string

    Currency:
      type: string
      description: Currency of a payment. If not specified, the local default is used.
      enum:
        - AUD
        - USD

    AccountType:
      type: string
      enum:
        - Office
        - Trust

    ArtifactType:
      type: string
      enum:
        - Invoice
        - TrustDeposit

    PaymentMethod:
      type: string
      enum:
        - Card
        - Debit
        - BankTransfer
        - BNPL10Week
        - BNPL6Month
        - BNPL12Month


    SurchargeChoice:
      type: string
      enum:
        - Customer
        - Merchant

    WebhookList:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
      required:
        - webhooks

    Webhook:
      type: object
      properties:
        webhook_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        party_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        name:
          type: string
        description:
          type: string
        url:
          type: string
        status:
          $ref: "#/components/schemas/WebhookStatus"
        events:
          type: array
          example: ["artifact.invoice.created", "payment.card.successful", "payout.disbursed"]
          items:
            type: string
        authentication:
          $ref: "#/components/schemas/WebhookApiAuthentication"
      required:
        - party_id
        - name
        - description
        - url
        - status
        - events
        - authentication


    WebhookResponse:
      type: object
      properties:
        webhook:
          $ref: "#/components/schemas/Webhook"
      required:
        - webhook

    WebhookApiAuthentication:
      type: object
      properties:
        type:
          type: string
          example: bearer_token, basic_auth
        add_position:
          type: string
          example: header, body
        data:
          description: Either "username" and "password" or "token" keys
          example: ' "username": "me@blah.com",  "password": "password:123" '
          additionalProperties:
            type: string
      required:
        - type
        - data

    WebhookStatus:
      type: string
      enum:
        - Unknown
        - Enabled
        - Disabled

    WebhookSendStatus:
      type: string
      description: Webhook send status
      enum:
        - sent
        - failed

    EventTopics:
      type: object
      properties:
        event_topics:
          type: array
          items:
            type: string
      required:
        - event_topics

    ErrorResponse:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        type:
          type: string


    Event:
      type: object
      properties:
        webhook_event_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        externalId:
          type: string
          description: The id of the firm the webhook was related to.
        topic:
          type: string
          description: The topic of the event.
        status:
          $ref: "#/components/schemas/WebhookSendStatus"
        payload:
          type: object
          additionalProperties: true
          description: The webhooks payload and metadata about how and when the data was sent.
        sent_at:
          type: string
          format: date-time
          description: The timestamp the webhook send was attempted.
      required:
        - webhook_event_id
        - topic
        - sent_at
        - status
        - payload
        - externalId

    Events:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        filters:
          $ref: "#/components/schemas/EventFilters"
      required:
        - events

    EventFilters:
      type: object
      properties:
        status:
          type: string
          example: sent, failed, all
        topic:
          type: string
          example: none, {userSupplied}
        since:
          type: string
          format: date-time
      required:
        - status
        - topic
        - since

    FirmResponse:
      type: object
      properties:
        firm:
          $ref: '#/components/schemas/Firm'
      required:
        - firm

    Firm:
      type: object
      properties:
        firm_id:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
        trading_name:
          type: string
        status:
          type: string
          enum:
            - Synced
            - InProgress
            - Denied
      required:
        - firm_id
        - trading_name
        - status

    BankAccount:
      type: object
      properties:
        account_id:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
        account_type:
          $ref: "#/components/schemas/AccountType"
        account_name:
          type: string
        account_number:
          type: string
        branch_code:
          type: string
        bank:
          type: string
        is_default:
          type: boolean
      required:
        - account_id
        - account_type
        - account_number
        - branch_code
        - is_default

    BankAccountResponse:
      type: object
      properties:
        bank_account:
          $ref: '#/components/schemas/BankAccount'
      required:
        - bank_account

    BankAccountsResponse:
      type: object
      properties:
        office_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        trust_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
      required:
        - office_accounts
        - trust_accounts


    Payment:
      description: Describes a payment coming into the system (client of a firm paying an invoice, trust deposit, ...)
      type: object
      properties:
        payment_id:
          type: string
          description: The unique id of the payment.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payment_type:
          type: string
          description: How the payment was made.
          enum:
            - Card
            - ACH
            - BNPL
            - External
        artifact_id:
          description: The artifact (Invoice, TrustDeposit, ...) the payment is in relation to.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        artifact_type:
          $ref: '#/components/schemas/ArtifactType'
        external_id:
          type: string
          description: This is the id of the artifact supplied by the channel partner / PMS.
        external_payment:
          description: |
            If the payment.payment_type is 'External', the external_payment property *may* be available.            
            The values for these properties are supplied in the call to 'RecordExternalPayment'
          type: object
          properties:
            type:
              type: string
              description: The type supplied when the external payment was recorded
            external_id:
              type: string
              description: The id supplied when the external payment was recorded
            details:
              type: string
              description: The details supplied when the external payment was recorded
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "1000.00"
        currency:
          type: string
          description: The currency the payment was made in.
        date:
          description: When the payment was made.
          type: string
          format: date-time
      required:
        - payment_id
        - artifact_id
        - artifact_type
        - amount
        - currency
        - date

    Payments:
      type: object
      properties:
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
      required:
        - payments

    Payout:
      description: Describes a payout made by the system to a channel partner
      type: object
      properties:
        payout_reference:
          type: string
          description: The unique reference of the payout. This will appear in the bank account statement the payout was made to.
        date:
          description: When the payout was made.
          type: string
          format: date-time
        payout_total:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "1000.00"
        account:
          type: object
          properties:
            account_type:
              $ref: '#/components/schemas/AccountType'
            branch_code:
              type: string
            branch_number:
              type: string
            alias:
              type: string
              description: The name of the account for the PMS
            country_code:
              type: string
              description: The country the account is in
          description: Details of the account the payout is for.
        firm_id:
          type: string
          description: The id of the firm the payout was made to.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        transactions:
          description: A list of the payments that are included in this payout
          type: array
          items:
            $ref: '#/components/schemas/Payment'
      required:
        - payout_reference
        - payout_total
        - firm_id
        - account
        - date
        - transactions

    Payouts:
      type: object
      properties:
        payouts:
          type: array
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - payouts


    WebhookEvent:
      type: object
      properties:
        event_type:
          type: string
        event_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        created_at:
          type: string
          format: date-time
        event:
          oneOf:
            - $ref: '#/components/schemas/Invoice'
            - $ref: '#/components/schemas/TrustDeposit'
            - $ref: '#/components/schemas/Payment'
            - $ref: '#/components/schemas/Payout'

    ApiKeyRotation:
      type: object
      properties:
        previous_key_expires_hours:
          default: 48
          description: hours until expiry (0 to expire immediately, defaults to 48 hours)
          example: 24
          type: integer
      required:
        - previous_key_expires_hours

    ApiKeyResponse:
      type: object
      properties:
        api_key:
          type: string

    ExternalPayment:
      description: A payment that was made outside of the FeeWise platform.
      type: object
      properties:
        artifact_id:
          description: The artifact (Invoice, TrustDeposit, ...) the payment is in relation to.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        artifact_type:
          $ref: '#/components/schemas/ArtifactType'
        amount:
          description: The amount of the external payment
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        payment_type:
          type: string
          description: Freeform description of the type (eg visa, amex, cash, bank transfer)
        external_id:
          type: string
          description: An ID, external to FeeWise, to identify the payment
        details:
          type: string
          description: Freeform description of the payment (eg "Paid in person with cash - receipt GB-6832" )
      required:
        - artifact_id
        - artifact_type
        - amount